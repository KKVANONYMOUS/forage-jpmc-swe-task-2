From eb8810f45f7ce35c5edcc4d6378888b1cc271e30 Mon Sep 17 00:00:00 2001
From: kkvanonymous <ninja.kunal01@gmail.com>
Date: Wed, 10 May 2023 23:25:59 +0530
Subject: [PATCH] add: perspective graph

---
 src/App.tsx   | 24 +++++++++++++-----
 src/Graph.tsx | 70 +++++++++++++++++++++++++++++++--------------------
 2 files changed, 61 insertions(+), 33 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..4c30746 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph:boolean
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph:false
     };
   }
 
@@ -29,18 +31,28 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if(this.state.showGraph){
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let cnt=0;
+    const interval=setInterval(()=>{
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        // Update the state by creating a new array of data that consists of
+        // Previous data in the state and the new data from server
+        this.setState({ data: serverResponds,showGraph:true });
+      });
+      cnt++;
+      if(cnt>1000) {
+        clearInterval(interval)
+      }
+    },100)
+    
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..4a3f236 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -1,21 +1,21 @@
-import React, { Component } from 'react';
-import { Table } from '@finos/perspective';
-import { ServerRespond } from './DataStreamer';
-import './Graph.css';
+import React, { Component } from "react"
+import { Table } from "@finos/perspective"
+import { ServerRespond } from "./DataStreamer"
+import "./Graph.css"
 
 /**
  * Props declaration for <Graph />
  */
 interface IProps {
-  data: ServerRespond[],
+  data: ServerRespond[]
 }
 
 /**
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
-  load: (table: Table) => void,
+interface PerspectiveViewerElement extends HTMLElement {
+  load: (table: Table) => void
 }
 
 /**
@@ -24,31 +24,45 @@ interface PerspectiveViewerElement {
  */
 class Graph extends Component<IProps, {}> {
   // Perspective table
-  table: Table | undefined;
+  table: Table | undefined
 
   render() {
-    return React.createElement('perspective-viewer');
+    return React.createElement("perspective-viewer")
   }
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = (document.getElementsByTagName(
+      "perspective-viewer"
+    )[0] as unknown) as PerspectiveViewerElement
 
     const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
-      timestamp: 'date',
-    };
+      stock: "string",
+      top_ask_price: "float",
+      top_bid_price: "float",
+      timestamp: "date",
+    }
 
     if (window.perspective && window.perspective.worker()) {
-      this.table = window.perspective.worker().table(schema);
+      this.table = window.perspective.worker().table(schema)
     }
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
 
       // Add more Perspective configurations here.
-      elem.load(this.table);
+      elem.load(this.table)
+      elem.setAttribute("view", "y_line")
+      elem.setAttribute("column-pivots", '["stock"]')
+      elem.setAttribute("row-pivots", '["timestamp"]')
+      elem.setAttribute("columns", '["top_ask_price"]')
+      elem.setAttribute(
+        "aggregates",
+        `{"stock":"distinct count",
+        "top_ask_price":"avg",
+        "top_bid_price":"avg",
+        "timestamp":"distinct count"          
+        }`
+      )
     }
   }
 
@@ -57,17 +71,19 @@ class Graph extends Component<IProps, {}> {
     if (this.table) {
       // As part of the task, you need to fix the way we update the data props to
       // avoid inserting duplicated entries into Perspective table again.
-      this.table.update(this.props.data.map((el: any) => {
-        // Format the data from ServerRespond to the schema
-        return {
-          stock: el.stock,
-          top_ask_price: el.top_ask && el.top_ask.price || 0,
-          top_bid_price: el.top_bid && el.top_bid.price || 0,
-          timestamp: el.timestamp,
-        };
-      }));
+      this.table.update(
+        this.props.data.map((el: any) => {
+          // Format the data from ServerRespond to the schema
+          return {
+            stock: el.stock,
+            top_ask_price: (el.top_ask && el.top_ask.price) || 0,
+            top_bid_price: (el.top_bid && el.top_bid.price) || 0,
+            timestamp: el.timestamp,
+          }
+        })
+      )
     }
   }
 }
 
-export default Graph;
+export default Graph
-- 
2.35.1.windows.2

